#![allow(dead_code)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]
#![allow(clippy::const_static_lifetime)]
#![allow(clippy::unreadable_literal)]
#![allow(clippy::cyclomatic_complexity)]
#![allow(clippy::useless_transmute)]
/* automatically generated by rust-bindgen 0.59.1 */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const __BITS_PER_LONG: u32 = 64;
pub const __FD_SETSIZE: u32 = 1024;
pub const _IOC_NRBITS: u32 = 8;
pub const _IOC_TYPEBITS: u32 = 8;
pub const _IOC_SIZEBITS: u32 = 14;
pub const _IOC_DIRBITS: u32 = 2;
pub const _IOC_NRMASK: u32 = 255;
pub const _IOC_TYPEMASK: u32 = 255;
pub const _IOC_SIZEMASK: u32 = 16383;
pub const _IOC_DIRMASK: u32 = 3;
pub const _IOC_NRSHIFT: u32 = 0;
pub const _IOC_TYPESHIFT: u32 = 8;
pub const _IOC_SIZESHIFT: u32 = 16;
pub const _IOC_DIRSHIFT: u32 = 30;
pub const _IOC_NONE: u32 = 0;
pub const _IOC_WRITE: u32 = 1;
pub const _IOC_READ: u32 = 2;
pub const IOC_IN: u32 = 1073741824;
pub const IOC_OUT: u32 = 2147483648;
pub const IOC_INOUT: u32 = 3221225472;
pub const IOCSIZE_MASK: u32 = 1073676288;
pub const IOCSIZE_SHIFT: u32 = 16;
pub const BTRFS_IOCTL_MAGIC: u32 = 148;
pub const BTRFS_VOL_NAME_MAX: u32 = 255;
pub const BTRFS_LABEL_SIZE: u32 = 256;
pub const BTRFS_PATH_NAME_MAX: u32 = 4087;
pub const BTRFS_DEVICE_PATH_NAME_MAX: u32 = 1024;
pub const BTRFS_SUBVOL_NAME_MAX: u32 = 4039;
pub const BTRFS_SUBVOL_CREATE_ASYNC: u32 = 1;
pub const BTRFS_SUBVOL_RDONLY: u32 = 2;
pub const BTRFS_SUBVOL_QGROUP_INHERIT: u32 = 4;
pub const BTRFS_DEVICE_SPEC_BY_ID: u32 = 8;
pub const BTRFS_VOL_ARG_V2_FLAGS_SUPPORTED: u32 = 15;
pub const BTRFS_FSID_SIZE: u32 = 16;
pub const BTRFS_UUID_SIZE: u32 = 16;
pub const BTRFS_UUID_UNPARSED_SIZE: u32 = 37;
pub const BTRFS_QGROUP_LIMIT_MAX_RFER: u32 = 1;
pub const BTRFS_QGROUP_LIMIT_MAX_EXCL: u32 = 2;
pub const BTRFS_QGROUP_LIMIT_RSV_RFER: u32 = 4;
pub const BTRFS_QGROUP_LIMIT_RSV_EXCL: u32 = 8;
pub const BTRFS_QGROUP_LIMIT_RFER_CMPR: u32 = 16;
pub const BTRFS_QGROUP_LIMIT_EXCL_CMPR: u32 = 32;
pub const BTRFS_QGROUP_INHERIT_SET_LIMITS: u32 = 1;
pub const BTRFS_SCRUB_READONLY: u32 = 1;
pub const BTRFS_IOCTL_DEV_REPLACE_CONT_READING_FROM_SRCDEV_MODE_ALWAYS: u32 = 0;
pub const BTRFS_IOCTL_DEV_REPLACE_CONT_READING_FROM_SRCDEV_MODE_AVOID: u32 = 1;
pub const BTRFS_IOCTL_DEV_REPLACE_STATE_NEVER_STARTED: u32 = 0;
pub const BTRFS_IOCTL_DEV_REPLACE_STATE_STARTED: u32 = 1;
pub const BTRFS_IOCTL_DEV_REPLACE_STATE_FINISHED: u32 = 2;
pub const BTRFS_IOCTL_DEV_REPLACE_STATE_CANCELED: u32 = 3;
pub const BTRFS_IOCTL_DEV_REPLACE_STATE_SUSPENDED: u32 = 4;
pub const BTRFS_IOCTL_DEV_REPLACE_CMD_START: u32 = 0;
pub const BTRFS_IOCTL_DEV_REPLACE_CMD_STATUS: u32 = 1;
pub const BTRFS_IOCTL_DEV_REPLACE_CMD_CANCEL: u32 = 2;
pub const BTRFS_IOCTL_DEV_REPLACE_RESULT_NO_ERROR: u32 = 0;
pub const BTRFS_IOCTL_DEV_REPLACE_RESULT_NOT_STARTED: u32 = 1;
pub const BTRFS_IOCTL_DEV_REPLACE_RESULT_ALREADY_STARTED: u32 = 2;
pub const BTRFS_IOCTL_DEV_REPLACE_RESULT_SCRUB_INPROGRESS: u32 = 3;
pub const BTRFS_FEATURE_COMPAT_RO_FREE_SPACE_TREE: u32 = 1;
pub const BTRFS_FEATURE_COMPAT_RO_FREE_SPACE_TREE_VALID: u32 = 2;
pub const BTRFS_FEATURE_INCOMPAT_MIXED_BACKREF: u32 = 1;
pub const BTRFS_FEATURE_INCOMPAT_DEFAULT_SUBVOL: u32 = 2;
pub const BTRFS_FEATURE_INCOMPAT_MIXED_GROUPS: u32 = 4;
pub const BTRFS_FEATURE_INCOMPAT_COMPRESS_LZO: u32 = 8;
pub const BTRFS_FEATURE_INCOMPAT_COMPRESS_ZSTD: u32 = 16;
pub const BTRFS_FEATURE_INCOMPAT_BIG_METADATA: u32 = 32;
pub const BTRFS_FEATURE_INCOMPAT_EXTENDED_IREF: u32 = 64;
pub const BTRFS_FEATURE_INCOMPAT_RAID56: u32 = 128;
pub const BTRFS_FEATURE_INCOMPAT_SKINNY_METADATA: u32 = 256;
pub const BTRFS_FEATURE_INCOMPAT_NO_HOLES: u32 = 512;
pub const BTRFS_FEATURE_INCOMPAT_METADATA_UUID: u32 = 1024;
pub const BTRFS_BALANCE_CTL_PAUSE: u32 = 1;
pub const BTRFS_BALANCE_CTL_CANCEL: u32 = 2;
pub const BTRFS_BALANCE_DATA: u32 = 1;
pub const BTRFS_BALANCE_SYSTEM: u32 = 2;
pub const BTRFS_BALANCE_METADATA: u32 = 4;
pub const BTRFS_BALANCE_TYPE_MASK: u32 = 7;
pub const BTRFS_BALANCE_FORCE: u32 = 8;
pub const BTRFS_BALANCE_RESUME: u32 = 16;
pub const BTRFS_BALANCE_ARGS_PROFILES: u32 = 1;
pub const BTRFS_BALANCE_ARGS_USAGE: u32 = 2;
pub const BTRFS_BALANCE_ARGS_DEVID: u32 = 4;
pub const BTRFS_BALANCE_ARGS_DRANGE: u32 = 8;
pub const BTRFS_BALANCE_ARGS_VRANGE: u32 = 16;
pub const BTRFS_BALANCE_ARGS_LIMIT: u32 = 32;
pub const BTRFS_BALANCE_ARGS_LIMIT_RANGE: u32 = 64;
pub const BTRFS_BALANCE_ARGS_STRIPES_RANGE: u32 = 128;
pub const BTRFS_BALANCE_ARGS_USAGE_RANGE: u32 = 1024;
pub const BTRFS_BALANCE_ARGS_MASK: u32 = 1279;
pub const BTRFS_BALANCE_ARGS_CONVERT: u32 = 256;
pub const BTRFS_BALANCE_ARGS_SOFT: u32 = 512;
pub const BTRFS_BALANCE_STATE_RUNNING: u32 = 1;
pub const BTRFS_BALANCE_STATE_PAUSE_REQ: u32 = 2;
pub const BTRFS_BALANCE_STATE_CANCEL_REQ: u32 = 4;
pub const BTRFS_INO_LOOKUP_PATH_MAX: u32 = 4080;
pub const BTRFS_INO_LOOKUP_USER_PATH_MAX: u32 = 3824;
pub const BTRFS_DEFRAG_RANGE_COMPRESS: u32 = 1;
pub const BTRFS_DEFRAG_RANGE_START_IO: u32 = 2;
pub const BTRFS_SAME_DATA_DIFFERS: u32 = 1;
pub const BTRFS_LOGICAL_INO_ARGS_IGNORE_OFFSET: u32 = 1;
pub const BTRFS_DEV_STATS_RESET: u32 = 1;
pub const BTRFS_QUOTA_CTL_ENABLE: u32 = 1;
pub const BTRFS_QUOTA_CTL_DISABLE: u32 = 2;
pub const BTRFS_QUOTA_CTL_RESCAN__NOTUSED: u32 = 3;
pub const BTRFS_SEND_FLAG_NO_FILE_DATA: u32 = 1;
pub const BTRFS_SEND_FLAG_OMIT_STREAM_HEADER: u32 = 2;
pub const BTRFS_SEND_FLAG_OMIT_END_CMD: u32 = 4;
pub const BTRFS_SEND_FLAG_MASK: u32 = 7;
pub const BTRFS_MAX_ROOTREF_BUFFER_NUM: u32 = 255;
pub const BTRFS_ROOT_TREE_OBJECTID: u32 = 1;
pub const BTRFS_EXTENT_TREE_OBJECTID: u32 = 2;
pub const BTRFS_CHUNK_TREE_OBJECTID: u32 = 3;
pub const BTRFS_DEV_TREE_OBJECTID: u32 = 4;
pub const BTRFS_FS_TREE_OBJECTID: u32 = 5;
pub const BTRFS_ROOT_TREE_DIR_OBJECTID: u32 = 6;
pub const BTRFS_CSUM_TREE_OBJECTID: u32 = 7;
pub const BTRFS_QUOTA_TREE_OBJECTID: u32 = 8;
pub const BTRFS_UUID_TREE_OBJECTID: u32 = 9;
pub const BTRFS_FREE_SPACE_TREE_OBJECTID: u32 = 10;
pub const BTRFS_DEV_STATS_OBJECTID: u32 = 0;
pub const BTRFS_BALANCE_OBJECTID: i32 = -4;
pub const BTRFS_ORPHAN_OBJECTID: i32 = -5;
pub const BTRFS_TREE_LOG_OBJECTID: i32 = -6;
pub const BTRFS_TREE_LOG_FIXUP_OBJECTID: i32 = -7;
pub const BTRFS_TREE_RELOC_OBJECTID: i32 = -8;
pub const BTRFS_DATA_RELOC_TREE_OBJECTID: i32 = -9;
pub const BTRFS_EXTENT_CSUM_OBJECTID: i32 = -10;
pub const BTRFS_FREE_SPACE_OBJECTID: i32 = -11;
pub const BTRFS_FREE_INO_OBJECTID: i32 = -12;
pub const BTRFS_MULTIPLE_OBJECTIDS: i32 = -255;
pub const BTRFS_FIRST_FREE_OBJECTID: u32 = 256;
pub const BTRFS_LAST_FREE_OBJECTID: i32 = -256;
pub const BTRFS_FIRST_CHUNK_TREE_OBJECTID: u32 = 256;
pub const BTRFS_DEV_ITEMS_OBJECTID: u32 = 1;
pub const BTRFS_BTREE_INODE_OBJECTID: u32 = 1;
pub const BTRFS_EMPTY_SUBVOL_DIR_OBJECTID: u32 = 2;
pub const BTRFS_DEV_REPLACE_DEVID: u32 = 0;
pub const BTRFS_INODE_ITEM_KEY: u32 = 1;
pub const BTRFS_INODE_REF_KEY: u32 = 12;
pub const BTRFS_INODE_EXTREF_KEY: u32 = 13;
pub const BTRFS_XATTR_ITEM_KEY: u32 = 24;
pub const BTRFS_ORPHAN_ITEM_KEY: u32 = 48;
pub const BTRFS_DIR_LOG_ITEM_KEY: u32 = 60;
pub const BTRFS_DIR_LOG_INDEX_KEY: u32 = 72;
pub const BTRFS_DIR_ITEM_KEY: u32 = 84;
pub const BTRFS_DIR_INDEX_KEY: u32 = 96;
pub const BTRFS_EXTENT_DATA_KEY: u32 = 108;
pub const BTRFS_EXTENT_CSUM_KEY: u32 = 128;
pub const BTRFS_ROOT_ITEM_KEY: u32 = 132;
pub const BTRFS_ROOT_BACKREF_KEY: u32 = 144;
pub const BTRFS_ROOT_REF_KEY: u32 = 156;
pub const BTRFS_EXTENT_ITEM_KEY: u32 = 168;
pub const BTRFS_METADATA_ITEM_KEY: u32 = 169;
pub const BTRFS_TREE_BLOCK_REF_KEY: u32 = 176;
pub const BTRFS_EXTENT_DATA_REF_KEY: u32 = 178;
pub const BTRFS_EXTENT_REF_V0_KEY: u32 = 180;
pub const BTRFS_SHARED_BLOCK_REF_KEY: u32 = 182;
pub const BTRFS_SHARED_DATA_REF_KEY: u32 = 184;
pub const BTRFS_BLOCK_GROUP_ITEM_KEY: u32 = 192;
pub const BTRFS_FREE_SPACE_INFO_KEY: u32 = 198;
pub const BTRFS_FREE_SPACE_EXTENT_KEY: u32 = 199;
pub const BTRFS_FREE_SPACE_BITMAP_KEY: u32 = 200;
pub const BTRFS_DEV_EXTENT_KEY: u32 = 204;
pub const BTRFS_DEV_ITEM_KEY: u32 = 216;
pub const BTRFS_CHUNK_ITEM_KEY: u32 = 228;
pub const BTRFS_QGROUP_STATUS_KEY: u32 = 240;
pub const BTRFS_QGROUP_INFO_KEY: u32 = 242;
pub const BTRFS_QGROUP_LIMIT_KEY: u32 = 244;
pub const BTRFS_QGROUP_RELATION_KEY: u32 = 246;
pub const BTRFS_BALANCE_ITEM_KEY: u32 = 248;
pub const BTRFS_TEMPORARY_ITEM_KEY: u32 = 248;
pub const BTRFS_DEV_STATS_KEY: u32 = 249;
pub const BTRFS_PERSISTENT_ITEM_KEY: u32 = 249;
pub const BTRFS_DEV_REPLACE_KEY: u32 = 250;
pub const BTRFS_UUID_KEY_SUBVOL: u32 = 251;
pub const BTRFS_UUID_KEY_RECEIVED_SUBVOL: u32 = 252;
pub const BTRFS_STRING_ITEM_KEY: u32 = 253;
pub const BTRFS_CSUM_SIZE: u32 = 32;
pub const BTRFS_FT_UNKNOWN: u32 = 0;
pub const BTRFS_FT_REG_FILE: u32 = 1;
pub const BTRFS_FT_DIR: u32 = 2;
pub const BTRFS_FT_CHRDEV: u32 = 3;
pub const BTRFS_FT_BLKDEV: u32 = 4;
pub const BTRFS_FT_FIFO: u32 = 5;
pub const BTRFS_FT_SOCK: u32 = 6;
pub const BTRFS_FT_SYMLINK: u32 = 7;
pub const BTRFS_FT_XATTR: u32 = 8;
pub const BTRFS_FT_MAX: u32 = 9;
pub const BTRFS_FREE_SPACE_EXTENT: u32 = 1;
pub const BTRFS_FREE_SPACE_BITMAP: u32 = 2;
pub const BTRFS_HEADER_FLAG_WRITTEN: u32 = 1;
pub const BTRFS_HEADER_FLAG_RELOC: u32 = 2;
pub const BTRFS_SUPER_FLAG_ERROR: u32 = 4;
pub const BTRFS_SUPER_FLAG_SEEDING: u64 = 4294967296;
pub const BTRFS_SUPER_FLAG_METADUMP: u64 = 8589934592;
pub const BTRFS_SUPER_FLAG_METADUMP_V2: u64 = 17179869184;
pub const BTRFS_SUPER_FLAG_CHANGING_FSID: u64 = 34359738368;
pub const BTRFS_SUPER_FLAG_CHANGING_FSID_V2: u64 = 68719476736;
pub const BTRFS_EXTENT_FLAG_DATA: u32 = 1;
pub const BTRFS_EXTENT_FLAG_TREE_BLOCK: u32 = 2;
pub const BTRFS_BLOCK_FLAG_FULL_BACKREF: u32 = 256;
pub const BTRFS_EXTENT_FLAG_SUPER: u64 = 281474976710656;
pub const BTRFS_ROOT_SUBVOL_RDONLY: u32 = 1;
pub const BTRFS_ROOT_SUBVOL_DEAD: u64 = 281474976710656;
pub const BTRFS_FILE_EXTENT_INLINE: u32 = 0;
pub const BTRFS_FILE_EXTENT_REG: u32 = 1;
pub const BTRFS_FILE_EXTENT_PREALLOC: u32 = 2;
pub const BTRFS_FILE_EXTENT_TYPES: u32 = 2;
pub const BTRFS_DEV_REPLACE_ITEM_CONT_READING_FROM_SRCDEV_MODE_ALWAYS: u32 = 0;
pub const BTRFS_DEV_REPLACE_ITEM_CONT_READING_FROM_SRCDEV_MODE_AVOID: u32 = 1;
pub const BTRFS_BLOCK_GROUP_DATA: u32 = 1;
pub const BTRFS_BLOCK_GROUP_SYSTEM: u32 = 2;
pub const BTRFS_BLOCK_GROUP_METADATA: u32 = 4;
pub const BTRFS_BLOCK_GROUP_RAID0: u32 = 8;
pub const BTRFS_BLOCK_GROUP_RAID1: u32 = 16;
pub const BTRFS_BLOCK_GROUP_DUP: u32 = 32;
pub const BTRFS_BLOCK_GROUP_RAID10: u32 = 64;
pub const BTRFS_BLOCK_GROUP_RAID5: u32 = 128;
pub const BTRFS_BLOCK_GROUP_RAID6: u32 = 256;
pub const BTRFS_BLOCK_GROUP_TYPE_MASK: u32 = 7;
pub const BTRFS_BLOCK_GROUP_PROFILE_MASK: u32 = 504;
pub const BTRFS_BLOCK_GROUP_RAID56_MASK: u32 = 384;
pub const BTRFS_BLOCK_GROUP_RAID1_MASK: u32 = 16;
pub const BTRFS_AVAIL_ALLOC_BIT_SINGLE: u64 = 281474976710656;
pub const BTRFS_SPACE_INFO_GLOBAL_RSV: u64 = 562949953421312;
pub const BTRFS_EXTENDED_PROFILE_MASK: u64 = 281474976711160;
pub const BTRFS_FREE_SPACE_USING_BITMAPS: u32 = 1;
pub const BTRFS_QGROUP_LEVEL_SHIFT: u32 = 48;
pub const BTRFS_QGROUP_STATUS_FLAG_ON: u32 = 1;
pub const BTRFS_QGROUP_STATUS_FLAG_RESCAN: u32 = 2;
pub const BTRFS_QGROUP_STATUS_FLAG_INCONSISTENT: u32 = 4;
pub const BTRFS_QGROUP_STATUS_VERSION: u32 = 1;
pub type __s8 = ::std::os::raw::c_schar;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___kernel_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__kernel_fd_set>())).fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ulong;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___kernel_fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__kernel_fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__kernel_fsid_t>())).val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fsid_t),
            "::",
            stringify!(val)
        )
    );
}
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = ::std::os::raw::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
pub type __poll_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_vol_args {
    pub fd: __s64,
    pub name: [::std::os::raw::c_char; 4088usize],
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_vol_args() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_vol_args>(),
        4096usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_vol_args))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_vol_args>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_vol_args))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_ioctl_vol_args>())).fd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_vol_args),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_ioctl_vol_args>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_vol_args),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_qgroup_limit {
    pub flags: __u64,
    pub max_rfer: __u64,
    pub max_excl: __u64,
    pub rsv_rfer: __u64,
    pub rsv_excl: __u64,
}
#[test]
fn bindgen_test_layout_btrfs_qgroup_limit() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_qgroup_limit>(),
        40usize,
        concat!("Size of: ", stringify!(btrfs_qgroup_limit))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_qgroup_limit>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_qgroup_limit))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_qgroup_limit>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_qgroup_limit),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_qgroup_limit>())).max_rfer as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_qgroup_limit),
            "::",
            stringify!(max_rfer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_qgroup_limit>())).max_excl as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_qgroup_limit),
            "::",
            stringify!(max_excl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_qgroup_limit>())).rsv_rfer as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_qgroup_limit),
            "::",
            stringify!(rsv_rfer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_qgroup_limit>())).rsv_excl as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_qgroup_limit),
            "::",
            stringify!(rsv_excl)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct btrfs_qgroup_inherit {
    pub flags: __u64,
    pub num_qgroups: __u64,
    pub num_ref_copies: __u64,
    pub num_excl_copies: __u64,
    pub lim: btrfs_qgroup_limit,
    pub qgroups: __IncompleteArrayField<__u64>,
}
#[test]
fn bindgen_test_layout_btrfs_qgroup_inherit() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_qgroup_inherit>(),
        72usize,
        concat!("Size of: ", stringify!(btrfs_qgroup_inherit))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_qgroup_inherit>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_qgroup_inherit))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_qgroup_inherit>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_qgroup_inherit),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_qgroup_inherit>())).num_qgroups as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_qgroup_inherit),
            "::",
            stringify!(num_qgroups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_qgroup_inherit>())).num_ref_copies as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_qgroup_inherit),
            "::",
            stringify!(num_ref_copies)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_qgroup_inherit>())).num_excl_copies as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_qgroup_inherit),
            "::",
            stringify!(num_excl_copies)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_qgroup_inherit>())).lim as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_qgroup_inherit),
            "::",
            stringify!(lim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_qgroup_inherit>())).qgroups as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_qgroup_inherit),
            "::",
            stringify!(qgroups)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_qgroup_limit_args {
    pub qgroupid: __u64,
    pub lim: btrfs_qgroup_limit,
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_qgroup_limit_args() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_qgroup_limit_args>(),
        48usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_qgroup_limit_args))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_qgroup_limit_args>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_qgroup_limit_args))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_qgroup_limit_args>())).qgroupid as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_qgroup_limit_args),
            "::",
            stringify!(qgroupid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_qgroup_limit_args>())).lim as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_qgroup_limit_args),
            "::",
            stringify!(lim)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct btrfs_ioctl_vol_args_v2 {
    pub fd: __s64,
    pub transid: __u64,
    pub flags: __u64,
    pub __bindgen_anon_1: btrfs_ioctl_vol_args_v2__bindgen_ty_1,
    pub __bindgen_anon_2: btrfs_ioctl_vol_args_v2__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union btrfs_ioctl_vol_args_v2__bindgen_ty_1 {
    pub __bindgen_anon_1: btrfs_ioctl_vol_args_v2__bindgen_ty_1__bindgen_ty_1,
    pub unused: [__u64; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_vol_args_v2__bindgen_ty_1__bindgen_ty_1 {
    pub size: __u64,
    pub qgroup_inherit: *mut btrfs_qgroup_inherit,
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_vol_args_v2__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_vol_args_v2__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(btrfs_ioctl_vol_args_v2__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_vol_args_v2__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(btrfs_ioctl_vol_args_v2__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_vol_args_v2__bindgen_ty_1__bindgen_ty_1>())).size
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_vol_args_v2__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_vol_args_v2__bindgen_ty_1__bindgen_ty_1>()))
                .qgroup_inherit as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_vol_args_v2__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(qgroup_inherit)
        )
    );
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_vol_args_v2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_vol_args_v2__bindgen_ty_1>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(btrfs_ioctl_vol_args_v2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_vol_args_v2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(btrfs_ioctl_vol_args_v2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_vol_args_v2__bindgen_ty_1>())).unused as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_vol_args_v2__bindgen_ty_1),
            "::",
            stringify!(unused)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union btrfs_ioctl_vol_args_v2__bindgen_ty_2 {
    pub name: [::std::os::raw::c_char; 4040usize],
    pub devid: __u64,
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_vol_args_v2__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_vol_args_v2__bindgen_ty_2>(),
        4040usize,
        concat!(
            "Size of: ",
            stringify!(btrfs_ioctl_vol_args_v2__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_vol_args_v2__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(btrfs_ioctl_vol_args_v2__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_vol_args_v2__bindgen_ty_2>())).name as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_vol_args_v2__bindgen_ty_2),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_vol_args_v2__bindgen_ty_2>())).devid as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_vol_args_v2__bindgen_ty_2),
            "::",
            stringify!(devid)
        )
    );
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_vol_args_v2() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_vol_args_v2>(),
        4096usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_vol_args_v2))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_vol_args_v2>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_vol_args_v2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_ioctl_vol_args_v2>())).fd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_vol_args_v2),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_ioctl_vol_args_v2>())).transid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_vol_args_v2),
            "::",
            stringify!(transid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_ioctl_vol_args_v2>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_vol_args_v2),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_scrub_progress {
    pub data_extents_scrubbed: __u64,
    pub tree_extents_scrubbed: __u64,
    pub data_bytes_scrubbed: __u64,
    pub tree_bytes_scrubbed: __u64,
    pub read_errors: __u64,
    pub csum_errors: __u64,
    pub verify_errors: __u64,
    pub no_csum: __u64,
    pub csum_discards: __u64,
    pub super_errors: __u64,
    pub malloc_errors: __u64,
    pub uncorrectable_errors: __u64,
    pub corrected_errors: __u64,
    pub last_physical: __u64,
    pub unverified_errors: __u64,
}
#[test]
fn bindgen_test_layout_btrfs_scrub_progress() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_scrub_progress>(),
        120usize,
        concat!("Size of: ", stringify!(btrfs_scrub_progress))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_scrub_progress>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_scrub_progress))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_scrub_progress>())).data_extents_scrubbed as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_scrub_progress),
            "::",
            stringify!(data_extents_scrubbed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_scrub_progress>())).tree_extents_scrubbed as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_scrub_progress),
            "::",
            stringify!(tree_extents_scrubbed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_scrub_progress>())).data_bytes_scrubbed as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_scrub_progress),
            "::",
            stringify!(data_bytes_scrubbed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_scrub_progress>())).tree_bytes_scrubbed as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_scrub_progress),
            "::",
            stringify!(tree_bytes_scrubbed)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_scrub_progress>())).read_errors as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_scrub_progress),
            "::",
            stringify!(read_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_scrub_progress>())).csum_errors as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_scrub_progress),
            "::",
            stringify!(csum_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_scrub_progress>())).verify_errors as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_scrub_progress),
            "::",
            stringify!(verify_errors)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_scrub_progress>())).no_csum as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_scrub_progress),
            "::",
            stringify!(no_csum)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_scrub_progress>())).csum_discards as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_scrub_progress),
            "::",
            stringify!(csum_discards)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_scrub_progress>())).super_errors as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_scrub_progress),
            "::",
            stringify!(super_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_scrub_progress>())).malloc_errors as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_scrub_progress),
            "::",
            stringify!(malloc_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_scrub_progress>())).uncorrectable_errors as *const _
                as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_scrub_progress),
            "::",
            stringify!(uncorrectable_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_scrub_progress>())).corrected_errors as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_scrub_progress),
            "::",
            stringify!(corrected_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_scrub_progress>())).last_physical as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_scrub_progress),
            "::",
            stringify!(last_physical)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_scrub_progress>())).unverified_errors as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_scrub_progress),
            "::",
            stringify!(unverified_errors)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_scrub_args {
    pub devid: __u64,
    pub start: __u64,
    pub end: __u64,
    pub flags: __u64,
    pub progress: btrfs_scrub_progress,
    pub unused: [__u64; 109usize],
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_scrub_args() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_scrub_args>(),
        1024usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_scrub_args))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_scrub_args>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_scrub_args))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_ioctl_scrub_args>())).devid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_scrub_args),
            "::",
            stringify!(devid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_ioctl_scrub_args>())).start as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_scrub_args),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_ioctl_scrub_args>())).end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_scrub_args),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_ioctl_scrub_args>())).flags as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_scrub_args),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_ioctl_scrub_args>())).progress as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_scrub_args),
            "::",
            stringify!(progress)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_ioctl_scrub_args>())).unused as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_scrub_args),
            "::",
            stringify!(unused)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_dev_replace_start_params {
    pub srcdevid: __u64,
    pub cont_reading_from_srcdev_mode: __u64,
    pub srcdev_name: [__u8; 1025usize],
    pub tgtdev_name: [__u8; 1025usize],
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_dev_replace_start_params() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_dev_replace_start_params>(),
        2072usize,
        concat!(
            "Size of: ",
            stringify!(btrfs_ioctl_dev_replace_start_params)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_dev_replace_start_params>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(btrfs_ioctl_dev_replace_start_params)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_dev_replace_start_params>())).srcdevid as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_dev_replace_start_params),
            "::",
            stringify!(srcdevid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_dev_replace_start_params>()))
                .cont_reading_from_srcdev_mode as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_dev_replace_start_params),
            "::",
            stringify!(cont_reading_from_srcdev_mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_dev_replace_start_params>())).srcdev_name as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_dev_replace_start_params),
            "::",
            stringify!(srcdev_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_dev_replace_start_params>())).tgtdev_name as *const _
                as usize
        },
        1041usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_dev_replace_start_params),
            "::",
            stringify!(tgtdev_name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_dev_replace_status_params {
    pub replace_state: __u64,
    pub progress_1000: __u64,
    pub time_started: __u64,
    pub time_stopped: __u64,
    pub num_write_errors: __u64,
    pub num_uncorrectable_read_errors: __u64,
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_dev_replace_status_params() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_dev_replace_status_params>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(btrfs_ioctl_dev_replace_status_params)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_dev_replace_status_params>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(btrfs_ioctl_dev_replace_status_params)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_dev_replace_status_params>())).replace_state
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_dev_replace_status_params),
            "::",
            stringify!(replace_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_dev_replace_status_params>())).progress_1000
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_dev_replace_status_params),
            "::",
            stringify!(progress_1000)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_dev_replace_status_params>())).time_started
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_dev_replace_status_params),
            "::",
            stringify!(time_started)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_dev_replace_status_params>())).time_stopped
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_dev_replace_status_params),
            "::",
            stringify!(time_stopped)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_dev_replace_status_params>())).num_write_errors
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_dev_replace_status_params),
            "::",
            stringify!(num_write_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_dev_replace_status_params>()))
                .num_uncorrectable_read_errors as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_dev_replace_status_params),
            "::",
            stringify!(num_uncorrectable_read_errors)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct btrfs_ioctl_dev_replace_args {
    pub cmd: __u64,
    pub result: __u64,
    pub __bindgen_anon_1: btrfs_ioctl_dev_replace_args__bindgen_ty_1,
    pub spare: [__u64; 64usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union btrfs_ioctl_dev_replace_args__bindgen_ty_1 {
    pub start: btrfs_ioctl_dev_replace_start_params,
    pub status: btrfs_ioctl_dev_replace_status_params,
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_dev_replace_args__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_dev_replace_args__bindgen_ty_1>(),
        2072usize,
        concat!(
            "Size of: ",
            stringify!(btrfs_ioctl_dev_replace_args__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_dev_replace_args__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(btrfs_ioctl_dev_replace_args__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_dev_replace_args__bindgen_ty_1>())).start as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_dev_replace_args__bindgen_ty_1),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_dev_replace_args__bindgen_ty_1>())).status
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_dev_replace_args__bindgen_ty_1),
            "::",
            stringify!(status)
        )
    );
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_dev_replace_args() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_dev_replace_args>(),
        2600usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_dev_replace_args))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_dev_replace_args>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_dev_replace_args))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_dev_replace_args>())).cmd as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_dev_replace_args),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_dev_replace_args>())).result as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_dev_replace_args),
            "::",
            stringify!(result)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_dev_replace_args>())).spare as *const _ as usize
        },
        2088usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_dev_replace_args),
            "::",
            stringify!(spare)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_dev_info_args {
    pub devid: __u64,
    pub uuid: [__u8; 16usize],
    pub bytes_used: __u64,
    pub total_bytes: __u64,
    pub unused: [__u64; 379usize],
    pub path: [__u8; 1024usize],
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_dev_info_args() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_dev_info_args>(),
        4096usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_dev_info_args))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_dev_info_args>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_dev_info_args))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_ioctl_dev_info_args>())).devid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_dev_info_args),
            "::",
            stringify!(devid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_ioctl_dev_info_args>())).uuid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_dev_info_args),
            "::",
            stringify!(uuid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_dev_info_args>())).bytes_used as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_dev_info_args),
            "::",
            stringify!(bytes_used)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_dev_info_args>())).total_bytes as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_dev_info_args),
            "::",
            stringify!(total_bytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_dev_info_args>())).unused as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_dev_info_args),
            "::",
            stringify!(unused)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_ioctl_dev_info_args>())).path as *const _ as usize },
        3072usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_dev_info_args),
            "::",
            stringify!(path)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_fs_info_args {
    pub max_id: __u64,
    pub num_devices: __u64,
    pub fsid: [__u8; 16usize],
    pub nodesize: __u32,
    pub sectorsize: __u32,
    pub clone_alignment: __u32,
    pub reserved32: __u32,
    pub reserved: [__u64; 122usize],
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_fs_info_args() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_fs_info_args>(),
        1024usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_fs_info_args))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_fs_info_args>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_fs_info_args))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_ioctl_fs_info_args>())).max_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_fs_info_args),
            "::",
            stringify!(max_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_fs_info_args>())).num_devices as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_fs_info_args),
            "::",
            stringify!(num_devices)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_ioctl_fs_info_args>())).fsid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_fs_info_args),
            "::",
            stringify!(fsid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_fs_info_args>())).nodesize as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_fs_info_args),
            "::",
            stringify!(nodesize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_fs_info_args>())).sectorsize as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_fs_info_args),
            "::",
            stringify!(sectorsize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_fs_info_args>())).clone_alignment as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_fs_info_args),
            "::",
            stringify!(clone_alignment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_fs_info_args>())).reserved32 as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_fs_info_args),
            "::",
            stringify!(reserved32)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_fs_info_args>())).reserved as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_fs_info_args),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_feature_flags {
    pub compat_flags: __u64,
    pub compat_ro_flags: __u64,
    pub incompat_flags: __u64,
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_feature_flags() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_feature_flags>(),
        24usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_feature_flags))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_feature_flags>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_feature_flags))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_feature_flags>())).compat_flags as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_feature_flags),
            "::",
            stringify!(compat_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_feature_flags>())).compat_ro_flags as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_feature_flags),
            "::",
            stringify!(compat_ro_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_feature_flags>())).incompat_flags as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_feature_flags),
            "::",
            stringify!(incompat_flags)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct btrfs_balance_args {
    pub profiles: __u64,
    pub __bindgen_anon_1: btrfs_balance_args__bindgen_ty_1,
    pub devid: __u64,
    pub pstart: __u64,
    pub pend: __u64,
    pub vstart: __u64,
    pub vend: __u64,
    pub target: __u64,
    pub flags: __u64,
    pub __bindgen_anon_2: btrfs_balance_args__bindgen_ty_2,
    pub stripes_min: __u32,
    pub stripes_max: __u32,
    pub unused: [__u64; 6usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union btrfs_balance_args__bindgen_ty_1 {
    pub usage: __u64,
    pub __bindgen_anon_1: btrfs_balance_args__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_balance_args__bindgen_ty_1__bindgen_ty_1 {
    pub usage_min: __u32,
    pub usage_max: __u32,
}
#[test]
fn bindgen_test_layout_btrfs_balance_args__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_balance_args__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(btrfs_balance_args__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_balance_args__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(btrfs_balance_args__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_balance_args__bindgen_ty_1__bindgen_ty_1>())).usage_min
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_balance_args__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(usage_min)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_balance_args__bindgen_ty_1__bindgen_ty_1>())).usage_max
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_balance_args__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(usage_max)
        )
    );
}
#[test]
fn bindgen_test_layout_btrfs_balance_args__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_balance_args__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(btrfs_balance_args__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_balance_args__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(btrfs_balance_args__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_balance_args__bindgen_ty_1>())).usage as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_balance_args__bindgen_ty_1),
            "::",
            stringify!(usage)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union btrfs_balance_args__bindgen_ty_2 {
    pub limit: __u64,
    pub __bindgen_anon_1: btrfs_balance_args__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_balance_args__bindgen_ty_2__bindgen_ty_1 {
    pub limit_min: __u32,
    pub limit_max: __u32,
}
#[test]
fn bindgen_test_layout_btrfs_balance_args__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_balance_args__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(btrfs_balance_args__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_balance_args__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(btrfs_balance_args__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_balance_args__bindgen_ty_2__bindgen_ty_1>())).limit_min
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_balance_args__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(limit_min)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_balance_args__bindgen_ty_2__bindgen_ty_1>())).limit_max
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_balance_args__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(limit_max)
        )
    );
}
#[test]
fn bindgen_test_layout_btrfs_balance_args__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_balance_args__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(btrfs_balance_args__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_balance_args__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(btrfs_balance_args__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_balance_args__bindgen_ty_2>())).limit as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_balance_args__bindgen_ty_2),
            "::",
            stringify!(limit)
        )
    );
}
#[test]
fn bindgen_test_layout_btrfs_balance_args() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_balance_args>(),
        136usize,
        concat!("Size of: ", stringify!(btrfs_balance_args))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_balance_args>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_balance_args))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_balance_args>())).profiles as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_balance_args),
            "::",
            stringify!(profiles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_balance_args>())).devid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_balance_args),
            "::",
            stringify!(devid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_balance_args>())).pstart as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_balance_args),
            "::",
            stringify!(pstart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_balance_args>())).pend as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_balance_args),
            "::",
            stringify!(pend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_balance_args>())).vstart as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_balance_args),
            "::",
            stringify!(vstart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_balance_args>())).vend as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_balance_args),
            "::",
            stringify!(vend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_balance_args>())).target as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_balance_args),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_balance_args>())).flags as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_balance_args),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_balance_args>())).stripes_min as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_balance_args),
            "::",
            stringify!(stripes_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_balance_args>())).stripes_max as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_balance_args),
            "::",
            stringify!(stripes_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_balance_args>())).unused as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_balance_args),
            "::",
            stringify!(unused)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_balance_progress {
    pub expected: __u64,
    pub considered: __u64,
    pub completed: __u64,
}
#[test]
fn bindgen_test_layout_btrfs_balance_progress() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_balance_progress>(),
        24usize,
        concat!("Size of: ", stringify!(btrfs_balance_progress))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_balance_progress>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_balance_progress))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_balance_progress>())).expected as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_balance_progress),
            "::",
            stringify!(expected)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_balance_progress>())).considered as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_balance_progress),
            "::",
            stringify!(considered)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_balance_progress>())).completed as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_balance_progress),
            "::",
            stringify!(completed)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct btrfs_ioctl_balance_args {
    pub flags: __u64,
    pub state: __u64,
    pub data: btrfs_balance_args,
    pub meta: btrfs_balance_args,
    pub sys: btrfs_balance_args,
    pub stat: btrfs_balance_progress,
    pub unused: [__u64; 72usize],
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_balance_args() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_balance_args>(),
        1024usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_balance_args))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_balance_args>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_balance_args))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_ioctl_balance_args>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_balance_args),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_ioctl_balance_args>())).state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_balance_args),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_ioctl_balance_args>())).data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_balance_args),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_ioctl_balance_args>())).meta as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_balance_args),
            "::",
            stringify!(meta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_ioctl_balance_args>())).sys as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_balance_args),
            "::",
            stringify!(sys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_ioctl_balance_args>())).stat as *const _ as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_balance_args),
            "::",
            stringify!(stat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_ioctl_balance_args>())).unused as *const _ as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_balance_args),
            "::",
            stringify!(unused)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_ino_lookup_args {
    pub treeid: __u64,
    pub objectid: __u64,
    pub name: [::std::os::raw::c_char; 4080usize],
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_ino_lookup_args() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_ino_lookup_args>(),
        4096usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_ino_lookup_args))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_ino_lookup_args>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_ino_lookup_args))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_ino_lookup_args>())).treeid as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_ino_lookup_args),
            "::",
            stringify!(treeid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_ino_lookup_args>())).objectid as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_ino_lookup_args),
            "::",
            stringify!(objectid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_ino_lookup_args>())).name as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_ino_lookup_args),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_ino_lookup_user_args {
    pub dirid: __u64,
    pub treeid: __u64,
    pub name: [::std::os::raw::c_char; 256usize],
    pub path: [::std::os::raw::c_char; 3824usize],
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_ino_lookup_user_args() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_ino_lookup_user_args>(),
        4096usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_ino_lookup_user_args))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_ino_lookup_user_args>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(btrfs_ioctl_ino_lookup_user_args)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_ino_lookup_user_args>())).dirid as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_ino_lookup_user_args),
            "::",
            stringify!(dirid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_ino_lookup_user_args>())).treeid as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_ino_lookup_user_args),
            "::",
            stringify!(treeid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_ino_lookup_user_args>())).name as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_ino_lookup_user_args),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_ino_lookup_user_args>())).path as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_ino_lookup_user_args),
            "::",
            stringify!(path)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_search_key {
    pub tree_id: __u64,
    pub min_objectid: __u64,
    pub max_objectid: __u64,
    pub min_offset: __u64,
    pub max_offset: __u64,
    pub min_transid: __u64,
    pub max_transid: __u64,
    pub min_type: __u32,
    pub max_type: __u32,
    pub nr_items: __u32,
    pub unused: __u32,
    pub unused1: __u64,
    pub unused2: __u64,
    pub unused3: __u64,
    pub unused4: __u64,
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_search_key() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_search_key>(),
        104usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_search_key))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_search_key>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_search_key))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_ioctl_search_key>())).tree_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_search_key),
            "::",
            stringify!(tree_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_search_key>())).min_objectid as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_search_key),
            "::",
            stringify!(min_objectid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_search_key>())).max_objectid as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_search_key),
            "::",
            stringify!(max_objectid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_search_key>())).min_offset as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_search_key),
            "::",
            stringify!(min_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_search_key>())).max_offset as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_search_key),
            "::",
            stringify!(max_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_search_key>())).min_transid as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_search_key),
            "::",
            stringify!(min_transid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_search_key>())).max_transid as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_search_key),
            "::",
            stringify!(max_transid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_ioctl_search_key>())).min_type as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_search_key),
            "::",
            stringify!(min_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_ioctl_search_key>())).max_type as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_search_key),
            "::",
            stringify!(max_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_ioctl_search_key>())).nr_items as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_search_key),
            "::",
            stringify!(nr_items)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_ioctl_search_key>())).unused as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_search_key),
            "::",
            stringify!(unused)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_ioctl_search_key>())).unused1 as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_search_key),
            "::",
            stringify!(unused1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_ioctl_search_key>())).unused2 as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_search_key),
            "::",
            stringify!(unused2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_ioctl_search_key>())).unused3 as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_search_key),
            "::",
            stringify!(unused3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_ioctl_search_key>())).unused4 as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_search_key),
            "::",
            stringify!(unused4)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_search_header {
    pub transid: __u64,
    pub objectid: __u64,
    pub offset: __u64,
    pub type_: __u32,
    pub len: __u32,
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_search_header() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_search_header>(),
        32usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_search_header))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_search_header>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_search_header))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_search_header>())).transid as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_search_header),
            "::",
            stringify!(transid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_search_header>())).objectid as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_search_header),
            "::",
            stringify!(objectid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_search_header>())).offset as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_search_header),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_ioctl_search_header>())).type_ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_search_header),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_ioctl_search_header>())).len as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_search_header),
            "::",
            stringify!(len)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_search_args {
    pub key: btrfs_ioctl_search_key,
    pub buf: [::std::os::raw::c_char; 3992usize],
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_search_args() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_search_args>(),
        4096usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_search_args))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_search_args>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_search_args))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_ioctl_search_args>())).key as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_search_args),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_ioctl_search_args>())).buf as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_search_args),
            "::",
            stringify!(buf)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct btrfs_ioctl_search_args_v2 {
    pub key: btrfs_ioctl_search_key,
    pub buf_size: __u64,
    pub buf: __IncompleteArrayField<__u64>,
    // pub buf: [u8; 1 * 1024 * 1024],
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_search_args_v2() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_search_args_v2>(),
        112usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_search_args_v2))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_search_args_v2>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_search_args_v2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_ioctl_search_args_v2>())).key as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_search_args_v2),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_search_args_v2>())).buf_size as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_search_args_v2),
            "::",
            stringify!(buf_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_ioctl_search_args_v2>())).buf as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_search_args_v2),
            "::",
            stringify!(buf)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_clone_range_args {
    pub src_fd: __s64,
    pub src_offset: __u64,
    pub src_length: __u64,
    pub dest_offset: __u64,
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_clone_range_args() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_clone_range_args>(),
        32usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_clone_range_args))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_clone_range_args>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_clone_range_args))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_clone_range_args>())).src_fd as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_clone_range_args),
            "::",
            stringify!(src_fd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_clone_range_args>())).src_offset as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_clone_range_args),
            "::",
            stringify!(src_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_clone_range_args>())).src_length as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_clone_range_args),
            "::",
            stringify!(src_length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_clone_range_args>())).dest_offset as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_clone_range_args),
            "::",
            stringify!(dest_offset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_defrag_range_args {
    pub start: __u64,
    pub len: __u64,
    pub flags: __u64,
    pub extent_thresh: __u32,
    pub compress_type: __u32,
    pub unused: [__u32; 4usize],
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_defrag_range_args() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_defrag_range_args>(),
        48usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_defrag_range_args))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_defrag_range_args>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_defrag_range_args))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_defrag_range_args>())).start as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_defrag_range_args),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_defrag_range_args>())).len as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_defrag_range_args),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_defrag_range_args>())).flags as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_defrag_range_args),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_defrag_range_args>())).extent_thresh as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_defrag_range_args),
            "::",
            stringify!(extent_thresh)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_defrag_range_args>())).compress_type as *const _
                as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_defrag_range_args),
            "::",
            stringify!(compress_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_defrag_range_args>())).unused as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_defrag_range_args),
            "::",
            stringify!(unused)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_same_extent_info {
    pub fd: __s64,
    pub logical_offset: __u64,
    pub bytes_deduped: __u64,
    pub status: __s32,
    pub reserved: __u32,
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_same_extent_info() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_same_extent_info>(),
        32usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_same_extent_info))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_same_extent_info>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_same_extent_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_ioctl_same_extent_info>())).fd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_same_extent_info),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_same_extent_info>())).logical_offset as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_same_extent_info),
            "::",
            stringify!(logical_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_same_extent_info>())).bytes_deduped as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_same_extent_info),
            "::",
            stringify!(bytes_deduped)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_same_extent_info>())).status as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_same_extent_info),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_same_extent_info>())).reserved as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_same_extent_info),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct btrfs_ioctl_same_args {
    pub logical_offset: __u64,
    pub length: __u64,
    pub dest_count: __u16,
    pub reserved1: __u16,
    pub reserved2: __u32,
    pub info: __IncompleteArrayField<btrfs_ioctl_same_extent_info>,
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_same_args() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_same_args>(),
        24usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_same_args))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_same_args>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_same_args))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_same_args>())).logical_offset as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_same_args),
            "::",
            stringify!(logical_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_ioctl_same_args>())).length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_same_args),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_same_args>())).dest_count as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_same_args),
            "::",
            stringify!(dest_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_ioctl_same_args>())).reserved1 as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_same_args),
            "::",
            stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_ioctl_same_args>())).reserved2 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_same_args),
            "::",
            stringify!(reserved2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_ioctl_same_args>())).info as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_same_args),
            "::",
            stringify!(info)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_space_info {
    pub flags: __u64,
    pub total_bytes: __u64,
    pub used_bytes: __u64,
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_space_info() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_space_info>(),
        24usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_space_info))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_space_info>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_space_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_ioctl_space_info>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_space_info),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_space_info>())).total_bytes as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_space_info),
            "::",
            stringify!(total_bytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_space_info>())).used_bytes as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_space_info),
            "::",
            stringify!(used_bytes)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct btrfs_ioctl_space_args {
    pub space_slots: __u64,
    pub total_spaces: __u64,
    pub spaces: __IncompleteArrayField<btrfs_ioctl_space_info>,
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_space_args() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_space_args>(),
        16usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_space_args))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_space_args>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_space_args))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_space_args>())).space_slots as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_space_args),
            "::",
            stringify!(space_slots)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_space_args>())).total_spaces as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_space_args),
            "::",
            stringify!(total_spaces)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_ioctl_space_args>())).spaces as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_space_args),
            "::",
            stringify!(spaces)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct btrfs_data_container {
    pub bytes_left: __u32,
    pub bytes_missing: __u32,
    pub elem_cnt: __u32,
    pub elem_missed: __u32,
    pub val: __IncompleteArrayField<__u64>,
}
#[test]
fn bindgen_test_layout_btrfs_data_container() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_data_container>(),
        16usize,
        concat!("Size of: ", stringify!(btrfs_data_container))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_data_container>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_data_container))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_data_container>())).bytes_left as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_data_container),
            "::",
            stringify!(bytes_left)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_data_container>())).bytes_missing as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_data_container),
            "::",
            stringify!(bytes_missing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_data_container>())).elem_cnt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_data_container),
            "::",
            stringify!(elem_cnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_data_container>())).elem_missed as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_data_container),
            "::",
            stringify!(elem_missed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_data_container>())).val as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_data_container),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_ino_path_args {
    pub inum: __u64,
    pub size: __u64,
    pub reserved: [__u64; 4usize],
    pub fspath: __u64,
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_ino_path_args() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_ino_path_args>(),
        56usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_ino_path_args))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_ino_path_args>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_ino_path_args))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_ioctl_ino_path_args>())).inum as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_ino_path_args),
            "::",
            stringify!(inum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_ioctl_ino_path_args>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_ino_path_args),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_ino_path_args>())).reserved as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_ino_path_args),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_ino_path_args>())).fspath as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_ino_path_args),
            "::",
            stringify!(fspath)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_logical_ino_args {
    pub logical: __u64,
    pub size: __u64,
    pub reserved: [__u64; 3usize],
    pub flags: __u64,
    pub inodes: __u64,
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_logical_ino_args() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_logical_ino_args>(),
        56usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_logical_ino_args))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_logical_ino_args>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_logical_ino_args))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_logical_ino_args>())).logical as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_logical_ino_args),
            "::",
            stringify!(logical)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_logical_ino_args>())).size as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_logical_ino_args),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_logical_ino_args>())).reserved as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_logical_ino_args),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_logical_ino_args>())).flags as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_logical_ino_args),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_logical_ino_args>())).inodes as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_logical_ino_args),
            "::",
            stringify!(inodes)
        )
    );
}
pub const btrfs_dev_stat_values_BTRFS_DEV_STAT_WRITE_ERRS: btrfs_dev_stat_values = 0;
pub const btrfs_dev_stat_values_BTRFS_DEV_STAT_READ_ERRS: btrfs_dev_stat_values = 1;
pub const btrfs_dev_stat_values_BTRFS_DEV_STAT_FLUSH_ERRS: btrfs_dev_stat_values = 2;
pub const btrfs_dev_stat_values_BTRFS_DEV_STAT_CORRUPTION_ERRS: btrfs_dev_stat_values = 3;
pub const btrfs_dev_stat_values_BTRFS_DEV_STAT_GENERATION_ERRS: btrfs_dev_stat_values = 4;
pub const btrfs_dev_stat_values_BTRFS_DEV_STAT_VALUES_MAX: btrfs_dev_stat_values = 5;
pub type btrfs_dev_stat_values = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_get_dev_stats {
    pub devid: __u64,
    pub nr_items: __u64,
    pub flags: __u64,
    pub values: [__u64; 5usize],
    pub unused: [__u64; 121usize],
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_get_dev_stats() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_get_dev_stats>(),
        1032usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_get_dev_stats))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_get_dev_stats>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_get_dev_stats))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_ioctl_get_dev_stats>())).devid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_dev_stats),
            "::",
            stringify!(devid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_get_dev_stats>())).nr_items as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_dev_stats),
            "::",
            stringify!(nr_items)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_ioctl_get_dev_stats>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_dev_stats),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_get_dev_stats>())).values as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_dev_stats),
            "::",
            stringify!(values)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_get_dev_stats>())).unused as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_dev_stats),
            "::",
            stringify!(unused)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_quota_ctl_args {
    pub cmd: __u64,
    pub status: __u64,
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_quota_ctl_args() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_quota_ctl_args>(),
        16usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_quota_ctl_args))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_quota_ctl_args>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_quota_ctl_args))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_ioctl_quota_ctl_args>())).cmd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_quota_ctl_args),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_quota_ctl_args>())).status as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_quota_ctl_args),
            "::",
            stringify!(status)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_quota_rescan_args {
    pub flags: __u64,
    pub progress: __u64,
    pub reserved: [__u64; 6usize],
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_quota_rescan_args() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_quota_rescan_args>(),
        64usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_quota_rescan_args))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_quota_rescan_args>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_quota_rescan_args))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_quota_rescan_args>())).flags as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_quota_rescan_args),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_quota_rescan_args>())).progress as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_quota_rescan_args),
            "::",
            stringify!(progress)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_quota_rescan_args>())).reserved as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_quota_rescan_args),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_qgroup_assign_args {
    pub assign: __u64,
    pub src: __u64,
    pub dst: __u64,
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_qgroup_assign_args() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_qgroup_assign_args>(),
        24usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_qgroup_assign_args))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_qgroup_assign_args>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_qgroup_assign_args))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_qgroup_assign_args>())).assign as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_qgroup_assign_args),
            "::",
            stringify!(assign)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_qgroup_assign_args>())).src as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_qgroup_assign_args),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_qgroup_assign_args>())).dst as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_qgroup_assign_args),
            "::",
            stringify!(dst)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_qgroup_create_args {
    pub create: __u64,
    pub qgroupid: __u64,
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_qgroup_create_args() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_qgroup_create_args>(),
        16usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_qgroup_create_args))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_qgroup_create_args>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_qgroup_create_args))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_qgroup_create_args>())).create as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_qgroup_create_args),
            "::",
            stringify!(create)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_qgroup_create_args>())).qgroupid as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_qgroup_create_args),
            "::",
            stringify!(qgroupid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_timespec {
    pub sec: __u64,
    pub nsec: __u32,
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_timespec() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_timespec>(),
        16usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_ioctl_timespec>())).sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_timespec),
            "::",
            stringify!(sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_ioctl_timespec>())).nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_timespec),
            "::",
            stringify!(nsec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_received_subvol_args {
    pub uuid: [::std::os::raw::c_char; 16usize],
    pub stransid: __u64,
    pub rtransid: __u64,
    pub stime: btrfs_ioctl_timespec,
    pub rtime: btrfs_ioctl_timespec,
    pub flags: __u64,
    pub reserved: [__u64; 16usize],
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_received_subvol_args() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_received_subvol_args>(),
        200usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_received_subvol_args))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_received_subvol_args>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(btrfs_ioctl_received_subvol_args)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_received_subvol_args>())).uuid as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_received_subvol_args),
            "::",
            stringify!(uuid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_received_subvol_args>())).stransid as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_received_subvol_args),
            "::",
            stringify!(stransid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_received_subvol_args>())).rtransid as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_received_subvol_args),
            "::",
            stringify!(rtransid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_received_subvol_args>())).stime as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_received_subvol_args),
            "::",
            stringify!(stime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_received_subvol_args>())).rtime as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_received_subvol_args),
            "::",
            stringify!(rtime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_received_subvol_args>())).flags as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_received_subvol_args),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_received_subvol_args>())).reserved as *const _
                as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_received_subvol_args),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_send_args {
    pub send_fd: __s64,
    pub clone_sources_count: __u64,
    pub clone_sources: *mut __u64,
    pub parent_root: __u64,
    pub flags: __u64,
    pub reserved: [__u64; 4usize],
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_send_args() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_send_args>(),
        72usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_send_args))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_send_args>(),
        8usize,
        concat!("Alignment of ", stringify!(btrfs_ioctl_send_args))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_ioctl_send_args>())).send_fd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_send_args),
            "::",
            stringify!(send_fd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_send_args>())).clone_sources_count as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_send_args),
            "::",
            stringify!(clone_sources_count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_send_args>())).clone_sources as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_send_args),
            "::",
            stringify!(clone_sources)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_send_args>())).parent_root as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_send_args),
            "::",
            stringify!(parent_root)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_ioctl_send_args>())).flags as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_send_args),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_ioctl_send_args>())).reserved as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_send_args),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_get_subvol_info_args {
    pub treeid: __u64,
    pub name: [::std::os::raw::c_char; 256usize],
    pub parent_id: __u64,
    pub dirid: __u64,
    pub generation: __u64,
    pub flags: __u64,
    pub uuid: [__u8; 16usize],
    pub parent_uuid: [__u8; 16usize],
    pub received_uuid: [__u8; 16usize],
    pub ctransid: __u64,
    pub otransid: __u64,
    pub stransid: __u64,
    pub rtransid: __u64,
    pub ctime: btrfs_ioctl_timespec,
    pub otime: btrfs_ioctl_timespec,
    pub stime: btrfs_ioctl_timespec,
    pub rtime: btrfs_ioctl_timespec,
    pub reserved: [__u64; 8usize],
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_get_subvol_info_args() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_get_subvol_info_args>(),
        504usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_get_subvol_info_args))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_get_subvol_info_args>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(btrfs_ioctl_get_subvol_info_args)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_get_subvol_info_args>())).treeid as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_subvol_info_args),
            "::",
            stringify!(treeid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_get_subvol_info_args>())).name as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_subvol_info_args),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_get_subvol_info_args>())).parent_id as *const _
                as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_subvol_info_args),
            "::",
            stringify!(parent_id)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_get_subvol_info_args>())).dirid as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_subvol_info_args),
            "::",
            stringify!(dirid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_get_subvol_info_args>())).generation as *const _
                as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_subvol_info_args),
            "::",
            stringify!(generation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_get_subvol_info_args>())).flags as *const _ as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_subvol_info_args),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_get_subvol_info_args>())).uuid as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_subvol_info_args),
            "::",
            stringify!(uuid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_get_subvol_info_args>())).parent_uuid as *const _
                as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_subvol_info_args),
            "::",
            stringify!(parent_uuid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_get_subvol_info_args>())).received_uuid as *const _
                as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_subvol_info_args),
            "::",
            stringify!(received_uuid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_get_subvol_info_args>())).ctransid as *const _
                as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_subvol_info_args),
            "::",
            stringify!(ctransid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_get_subvol_info_args>())).otransid as *const _
                as usize
        },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_subvol_info_args),
            "::",
            stringify!(otransid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_get_subvol_info_args>())).stransid as *const _
                as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_subvol_info_args),
            "::",
            stringify!(stransid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_get_subvol_info_args>())).rtransid as *const _
                as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_subvol_info_args),
            "::",
            stringify!(rtransid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_get_subvol_info_args>())).ctime as *const _ as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_subvol_info_args),
            "::",
            stringify!(ctime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_get_subvol_info_args>())).otime as *const _ as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_subvol_info_args),
            "::",
            stringify!(otime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_get_subvol_info_args>())).stime as *const _ as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_subvol_info_args),
            "::",
            stringify!(stime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_get_subvol_info_args>())).rtime as *const _ as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_subvol_info_args),
            "::",
            stringify!(rtime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_get_subvol_info_args>())).reserved as *const _
                as usize
        },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_subvol_info_args),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_get_subvol_rootref_args {
    pub min_treeid: __u64,
    pub rootref: [btrfs_ioctl_get_subvol_rootref_args__bindgen_ty_1; 255usize],
    pub num_items: __u8,
    pub align: [__u8; 7usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_ioctl_get_subvol_rootref_args__bindgen_ty_1 {
    pub treeid: __u64,
    pub dirid: __u64,
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_get_subvol_rootref_args__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_get_subvol_rootref_args__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(btrfs_ioctl_get_subvol_rootref_args__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_get_subvol_rootref_args__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(btrfs_ioctl_get_subvol_rootref_args__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_get_subvol_rootref_args__bindgen_ty_1>())).treeid
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_subvol_rootref_args__bindgen_ty_1),
            "::",
            stringify!(treeid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_get_subvol_rootref_args__bindgen_ty_1>())).dirid
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_subvol_rootref_args__bindgen_ty_1),
            "::",
            stringify!(dirid)
        )
    );
}
#[test]
fn bindgen_test_layout_btrfs_ioctl_get_subvol_rootref_args() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_ioctl_get_subvol_rootref_args>(),
        4096usize,
        concat!("Size of: ", stringify!(btrfs_ioctl_get_subvol_rootref_args))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_ioctl_get_subvol_rootref_args>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(btrfs_ioctl_get_subvol_rootref_args)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_get_subvol_rootref_args>())).min_treeid as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_subvol_rootref_args),
            "::",
            stringify!(min_treeid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_get_subvol_rootref_args>())).rootref as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_subvol_rootref_args),
            "::",
            stringify!(rootref)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_get_subvol_rootref_args>())).num_items as *const _
                as usize
        },
        4088usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_subvol_rootref_args),
            "::",
            stringify!(num_items)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_ioctl_get_subvol_rootref_args>())).align as *const _
                as usize
        },
        4089usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_ioctl_get_subvol_rootref_args),
            "::",
            stringify!(align)
        )
    );
}
pub const btrfs_err_code_BTRFS_ERROR_DEV_RAID1_MIN_NOT_MET: btrfs_err_code = 1;
pub const btrfs_err_code_BTRFS_ERROR_DEV_RAID10_MIN_NOT_MET: btrfs_err_code = 2;
pub const btrfs_err_code_BTRFS_ERROR_DEV_RAID5_MIN_NOT_MET: btrfs_err_code = 3;
pub const btrfs_err_code_BTRFS_ERROR_DEV_RAID6_MIN_NOT_MET: btrfs_err_code = 4;
pub const btrfs_err_code_BTRFS_ERROR_DEV_TGT_REPLACE: btrfs_err_code = 5;
pub const btrfs_err_code_BTRFS_ERROR_DEV_MISSING_NOT_FOUND: btrfs_err_code = 6;
pub const btrfs_err_code_BTRFS_ERROR_DEV_ONLY_WRITABLE: btrfs_err_code = 7;
pub const btrfs_err_code_BTRFS_ERROR_DEV_EXCL_RUN_IN_PROGRESS: btrfs_err_code = 8;
pub type btrfs_err_code = ::std::os::raw::c_uint;
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub const btrfs_csum_type_BTRFS_CSUM_TYPE_CRC32: btrfs_csum_type = 0;
pub type btrfs_csum_type = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_disk_key {
    pub objectid: __le64,
    pub type_: __u8,
    pub offset: __le64,
}
#[test]
fn bindgen_test_layout_btrfs_disk_key() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_disk_key>(),
        17usize,
        concat!("Size of: ", stringify!(btrfs_disk_key))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_disk_key>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_disk_key))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_disk_key>())).objectid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_disk_key),
            "::",
            stringify!(objectid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_disk_key>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_disk_key),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_disk_key>())).offset as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_disk_key),
            "::",
            stringify!(offset)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_key {
    pub objectid: __u64,
    pub type_: __u8,
    pub offset: __u64,
}
#[test]
fn bindgen_test_layout_btrfs_key() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_key>(),
        17usize,
        concat!("Size of: ", stringify!(btrfs_key))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_key>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_key))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_key>())).objectid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_key),
            "::",
            stringify!(objectid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_key>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_key),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_key>())).offset as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_key),
            "::",
            stringify!(offset)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_dev_item {
    pub devid: __le64,
    pub total_bytes: __le64,
    pub bytes_used: __le64,
    pub io_align: __le32,
    pub io_width: __le32,
    pub sector_size: __le32,
    pub type_: __le64,
    pub generation: __le64,
    pub start_offset: __le64,
    pub dev_group: __le32,
    pub seek_speed: __u8,
    pub bandwidth: __u8,
    pub uuid: [__u8; 16usize],
    pub fsid: [__u8; 16usize],
}
#[test]
fn bindgen_test_layout_btrfs_dev_item() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_dev_item>(),
        98usize,
        concat!("Size of: ", stringify!(btrfs_dev_item))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_dev_item>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_dev_item))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_dev_item>())).devid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dev_item),
            "::",
            stringify!(devid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_dev_item>())).total_bytes as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dev_item),
            "::",
            stringify!(total_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_dev_item>())).bytes_used as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dev_item),
            "::",
            stringify!(bytes_used)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_dev_item>())).io_align as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dev_item),
            "::",
            stringify!(io_align)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_dev_item>())).io_width as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dev_item),
            "::",
            stringify!(io_width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_dev_item>())).sector_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dev_item),
            "::",
            stringify!(sector_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_dev_item>())).type_ as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dev_item),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_dev_item>())).generation as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dev_item),
            "::",
            stringify!(generation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_dev_item>())).start_offset as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dev_item),
            "::",
            stringify!(start_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_dev_item>())).dev_group as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dev_item),
            "::",
            stringify!(dev_group)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_dev_item>())).seek_speed as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dev_item),
            "::",
            stringify!(seek_speed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_dev_item>())).bandwidth as *const _ as usize },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dev_item),
            "::",
            stringify!(bandwidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_dev_item>())).uuid as *const _ as usize },
        66usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dev_item),
            "::",
            stringify!(uuid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_dev_item>())).fsid as *const _ as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dev_item),
            "::",
            stringify!(fsid)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_stripe {
    pub devid: __le64,
    pub offset: __le64,
    pub dev_uuid: [__u8; 16usize],
}
#[test]
fn bindgen_test_layout_btrfs_stripe() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_stripe>(),
        32usize,
        concat!("Size of: ", stringify!(btrfs_stripe))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_stripe>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_stripe))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_stripe>())).devid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_stripe),
            "::",
            stringify!(devid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_stripe>())).offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_stripe),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_stripe>())).dev_uuid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_stripe),
            "::",
            stringify!(dev_uuid)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_chunk {
    pub length: __le64,
    pub owner: __le64,
    pub stripe_len: __le64,
    pub type_: __le64,
    pub io_align: __le32,
    pub io_width: __le32,
    pub sector_size: __le32,
    pub num_stripes: __le16,
    pub sub_stripes: __le16,
    pub stripe: btrfs_stripe,
}
#[test]
fn bindgen_test_layout_btrfs_chunk() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_chunk>(),
        80usize,
        concat!("Size of: ", stringify!(btrfs_chunk))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_chunk>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_chunk))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_chunk>())).length as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_chunk),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_chunk>())).owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_chunk),
            "::",
            stringify!(owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_chunk>())).stripe_len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_chunk),
            "::",
            stringify!(stripe_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_chunk>())).type_ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_chunk),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_chunk>())).io_align as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_chunk),
            "::",
            stringify!(io_align)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_chunk>())).io_width as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_chunk),
            "::",
            stringify!(io_width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_chunk>())).sector_size as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_chunk),
            "::",
            stringify!(sector_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_chunk>())).num_stripes as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_chunk),
            "::",
            stringify!(num_stripes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_chunk>())).sub_stripes as *const _ as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_chunk),
            "::",
            stringify!(sub_stripes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_chunk>())).stripe as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_chunk),
            "::",
            stringify!(stripe)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_free_space_entry {
    pub offset: __le64,
    pub bytes: __le64,
    pub type_: __u8,
}
#[test]
fn bindgen_test_layout_btrfs_free_space_entry() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_free_space_entry>(),
        17usize,
        concat!("Size of: ", stringify!(btrfs_free_space_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_free_space_entry>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_free_space_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_free_space_entry>())).offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_free_space_entry),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_free_space_entry>())).bytes as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_free_space_entry),
            "::",
            stringify!(bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_free_space_entry>())).type_ as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_free_space_entry),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_free_space_header {
    pub location: btrfs_disk_key,
    pub generation: __le64,
    pub num_entries: __le64,
    pub num_bitmaps: __le64,
}
#[test]
fn bindgen_test_layout_btrfs_free_space_header() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_free_space_header>(),
        41usize,
        concat!("Size of: ", stringify!(btrfs_free_space_header))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_free_space_header>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_free_space_header))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_free_space_header>())).location as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_free_space_header),
            "::",
            stringify!(location)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_free_space_header>())).generation as *const _ as usize
        },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_free_space_header),
            "::",
            stringify!(generation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_free_space_header>())).num_entries as *const _ as usize
        },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_free_space_header),
            "::",
            stringify!(num_entries)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_free_space_header>())).num_bitmaps as *const _ as usize
        },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_free_space_header),
            "::",
            stringify!(num_bitmaps)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_extent_item {
    pub refs: __le64,
    pub generation: __le64,
    pub flags: __le64,
}
#[test]
fn bindgen_test_layout_btrfs_extent_item() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_extent_item>(),
        24usize,
        concat!("Size of: ", stringify!(btrfs_extent_item))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_extent_item>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_extent_item))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_extent_item>())).refs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_extent_item),
            "::",
            stringify!(refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_extent_item>())).generation as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_extent_item),
            "::",
            stringify!(generation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_extent_item>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_extent_item),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_extent_item_v0 {
    pub refs: __le32,
}
#[test]
fn bindgen_test_layout_btrfs_extent_item_v0() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_extent_item_v0>(),
        4usize,
        concat!("Size of: ", stringify!(btrfs_extent_item_v0))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_extent_item_v0>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_extent_item_v0))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_extent_item_v0>())).refs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_extent_item_v0),
            "::",
            stringify!(refs)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_tree_block_info {
    pub key: btrfs_disk_key,
    pub level: __u8,
}
#[test]
fn bindgen_test_layout_btrfs_tree_block_info() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_tree_block_info>(),
        18usize,
        concat!("Size of: ", stringify!(btrfs_tree_block_info))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_tree_block_info>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_tree_block_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_tree_block_info>())).key as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_tree_block_info),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_tree_block_info>())).level as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_tree_block_info),
            "::",
            stringify!(level)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_extent_data_ref {
    pub root: __le64,
    pub objectid: __le64,
    pub offset: __le64,
    pub count: __le32,
}
#[test]
fn bindgen_test_layout_btrfs_extent_data_ref() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_extent_data_ref>(),
        28usize,
        concat!("Size of: ", stringify!(btrfs_extent_data_ref))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_extent_data_ref>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_extent_data_ref))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_extent_data_ref>())).root as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_extent_data_ref),
            "::",
            stringify!(root)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_extent_data_ref>())).objectid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_extent_data_ref),
            "::",
            stringify!(objectid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_extent_data_ref>())).offset as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_extent_data_ref),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_extent_data_ref>())).count as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_extent_data_ref),
            "::",
            stringify!(count)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_shared_data_ref {
    pub count: __le32,
}
#[test]
fn bindgen_test_layout_btrfs_shared_data_ref() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_shared_data_ref>(),
        4usize,
        concat!("Size of: ", stringify!(btrfs_shared_data_ref))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_shared_data_ref>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_shared_data_ref))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_shared_data_ref>())).count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_shared_data_ref),
            "::",
            stringify!(count)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_extent_inline_ref {
    pub type_: __u8,
    pub offset: __le64,
}
#[test]
fn bindgen_test_layout_btrfs_extent_inline_ref() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_extent_inline_ref>(),
        9usize,
        concat!("Size of: ", stringify!(btrfs_extent_inline_ref))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_extent_inline_ref>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_extent_inline_ref))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_extent_inline_ref>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_extent_inline_ref),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_extent_inline_ref>())).offset as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_extent_inline_ref),
            "::",
            stringify!(offset)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_extent_ref_v0 {
    pub root: __le64,
    pub generation: __le64,
    pub objectid: __le64,
    pub count: __le32,
}
#[test]
fn bindgen_test_layout_btrfs_extent_ref_v0() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_extent_ref_v0>(),
        28usize,
        concat!("Size of: ", stringify!(btrfs_extent_ref_v0))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_extent_ref_v0>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_extent_ref_v0))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_extent_ref_v0>())).root as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_extent_ref_v0),
            "::",
            stringify!(root)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_extent_ref_v0>())).generation as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_extent_ref_v0),
            "::",
            stringify!(generation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_extent_ref_v0>())).objectid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_extent_ref_v0),
            "::",
            stringify!(objectid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_extent_ref_v0>())).count as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_extent_ref_v0),
            "::",
            stringify!(count)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_dev_extent {
    pub chunk_tree: __le64,
    pub chunk_objectid: __le64,
    pub chunk_offset: __le64,
    pub length: __le64,
    pub chunk_tree_uuid: [__u8; 16usize],
}
#[test]
fn bindgen_test_layout_btrfs_dev_extent() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_dev_extent>(),
        48usize,
        concat!("Size of: ", stringify!(btrfs_dev_extent))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_dev_extent>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_dev_extent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_dev_extent>())).chunk_tree as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dev_extent),
            "::",
            stringify!(chunk_tree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_dev_extent>())).chunk_objectid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dev_extent),
            "::",
            stringify!(chunk_objectid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_dev_extent>())).chunk_offset as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dev_extent),
            "::",
            stringify!(chunk_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_dev_extent>())).length as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dev_extent),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_dev_extent>())).chunk_tree_uuid as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dev_extent),
            "::",
            stringify!(chunk_tree_uuid)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_inode_ref {
    pub index: __le64,
    pub name_len: __le16,
}
#[test]
fn bindgen_test_layout_btrfs_inode_ref() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_inode_ref>(),
        10usize,
        concat!("Size of: ", stringify!(btrfs_inode_ref))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_inode_ref>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_inode_ref))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_inode_ref>())).index as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_inode_ref),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_inode_ref>())).name_len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_inode_ref),
            "::",
            stringify!(name_len)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug)]
pub struct btrfs_inode_extref {
    pub parent_objectid: __le64,
    pub index: __le64,
    pub name_len: __le16,
    pub name: __IncompleteArrayField<__u8>,
}
#[test]
fn bindgen_test_layout_btrfs_inode_extref() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_inode_extref>(),
        18usize,
        concat!("Size of: ", stringify!(btrfs_inode_extref))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_inode_extref>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_inode_extref))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_inode_extref>())).parent_objectid as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_inode_extref),
            "::",
            stringify!(parent_objectid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_inode_extref>())).index as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_inode_extref),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_inode_extref>())).name_len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_inode_extref),
            "::",
            stringify!(name_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_inode_extref>())).name as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_inode_extref),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_timespec {
    pub sec: __le64,
    pub nsec: __le32,
}
#[test]
fn bindgen_test_layout_btrfs_timespec() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_timespec>(),
        12usize,
        concat!("Size of: ", stringify!(btrfs_timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_timespec>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_timespec>())).sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_timespec),
            "::",
            stringify!(sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_timespec>())).nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_timespec),
            "::",
            stringify!(nsec)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_inode_item {
    pub generation: __le64,
    pub transid: __le64,
    pub size: __le64,
    pub nbytes: __le64,
    pub block_group: __le64,
    pub nlink: __le32,
    pub uid: __le32,
    pub gid: __le32,
    pub mode: __le32,
    pub rdev: __le64,
    pub flags: __le64,
    pub sequence: __le64,
    pub reserved: [__le64; 4usize],
    pub atime: btrfs_timespec,
    pub ctime: btrfs_timespec,
    pub mtime: btrfs_timespec,
    pub otime: btrfs_timespec,
}
#[test]
fn bindgen_test_layout_btrfs_inode_item() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_inode_item>(),
        160usize,
        concat!("Size of: ", stringify!(btrfs_inode_item))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_inode_item>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_inode_item))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_inode_item>())).generation as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_inode_item),
            "::",
            stringify!(generation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_inode_item>())).transid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_inode_item),
            "::",
            stringify!(transid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_inode_item>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_inode_item),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_inode_item>())).nbytes as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_inode_item),
            "::",
            stringify!(nbytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_inode_item>())).block_group as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_inode_item),
            "::",
            stringify!(block_group)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_inode_item>())).nlink as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_inode_item),
            "::",
            stringify!(nlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_inode_item>())).uid as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_inode_item),
            "::",
            stringify!(uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_inode_item>())).gid as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_inode_item),
            "::",
            stringify!(gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_inode_item>())).mode as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_inode_item),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_inode_item>())).rdev as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_inode_item),
            "::",
            stringify!(rdev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_inode_item>())).flags as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_inode_item),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_inode_item>())).sequence as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_inode_item),
            "::",
            stringify!(sequence)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_inode_item>())).reserved as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_inode_item),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_inode_item>())).atime as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_inode_item),
            "::",
            stringify!(atime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_inode_item>())).ctime as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_inode_item),
            "::",
            stringify!(ctime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_inode_item>())).mtime as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_inode_item),
            "::",
            stringify!(mtime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_inode_item>())).otime as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_inode_item),
            "::",
            stringify!(otime)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_dir_log_item {
    pub end: __le64,
}
#[test]
fn bindgen_test_layout_btrfs_dir_log_item() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_dir_log_item>(),
        8usize,
        concat!("Size of: ", stringify!(btrfs_dir_log_item))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_dir_log_item>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_dir_log_item))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_dir_log_item>())).end as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dir_log_item),
            "::",
            stringify!(end)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_dir_item {
    pub location: btrfs_disk_key,
    pub transid: __le64,
    pub data_len: __le16,
    pub name_len: __le16,
    pub type_: __u8,
}
#[test]
fn bindgen_test_layout_btrfs_dir_item() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_dir_item>(),
        30usize,
        concat!("Size of: ", stringify!(btrfs_dir_item))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_dir_item>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_dir_item))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_dir_item>())).location as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dir_item),
            "::",
            stringify!(location)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_dir_item>())).transid as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dir_item),
            "::",
            stringify!(transid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_dir_item>())).data_len as *const _ as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dir_item),
            "::",
            stringify!(data_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_dir_item>())).name_len as *const _ as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dir_item),
            "::",
            stringify!(name_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_dir_item>())).type_ as *const _ as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dir_item),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_root_item {
    pub inode: btrfs_inode_item,
    pub generation: __le64,
    pub root_dirid: __le64,
    pub bytenr: __le64,
    pub byte_limit: __le64,
    pub bytes_used: __le64,
    pub last_snapshot: __le64,
    pub flags: __le64,
    pub refs: __le32,
    pub drop_progress: btrfs_disk_key,
    pub drop_level: __u8,
    pub level: __u8,
    pub generation_v2: __le64,
    pub uuid: [__u8; 16usize],
    pub parent_uuid: [__u8; 16usize],
    pub received_uuid: [__u8; 16usize],
    pub ctransid: __le64,
    pub otransid: __le64,
    pub stransid: __le64,
    pub rtransid: __le64,
    pub ctime: btrfs_timespec,
    pub otime: btrfs_timespec,
    pub stime: btrfs_timespec,
    pub rtime: btrfs_timespec,
    pub reserved: [__le64; 8usize],
}
#[test]
fn bindgen_test_layout_btrfs_root_item() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_root_item>(),
        439usize,
        concat!("Size of: ", stringify!(btrfs_root_item))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_root_item>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_root_item))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_root_item>())).inode as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item),
            "::",
            stringify!(inode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_root_item>())).generation as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item),
            "::",
            stringify!(generation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_root_item>())).root_dirid as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item),
            "::",
            stringify!(root_dirid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_root_item>())).bytenr as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item),
            "::",
            stringify!(bytenr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_root_item>())).byte_limit as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item),
            "::",
            stringify!(byte_limit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_root_item>())).bytes_used as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item),
            "::",
            stringify!(bytes_used)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_root_item>())).last_snapshot as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item),
            "::",
            stringify!(last_snapshot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_root_item>())).flags as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_root_item>())).refs as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item),
            "::",
            stringify!(refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_root_item>())).drop_progress as *const _ as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item),
            "::",
            stringify!(drop_progress)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_root_item>())).drop_level as *const _ as usize },
        237usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item),
            "::",
            stringify!(drop_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_root_item>())).level as *const _ as usize },
        238usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item),
            "::",
            stringify!(level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_root_item>())).generation_v2 as *const _ as usize },
        239usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item),
            "::",
            stringify!(generation_v2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_root_item>())).uuid as *const _ as usize },
        247usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item),
            "::",
            stringify!(uuid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_root_item>())).parent_uuid as *const _ as usize },
        263usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item),
            "::",
            stringify!(parent_uuid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_root_item>())).received_uuid as *const _ as usize },
        279usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item),
            "::",
            stringify!(received_uuid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_root_item>())).ctransid as *const _ as usize },
        295usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item),
            "::",
            stringify!(ctransid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_root_item>())).otransid as *const _ as usize },
        303usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item),
            "::",
            stringify!(otransid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_root_item>())).stransid as *const _ as usize },
        311usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item),
            "::",
            stringify!(stransid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_root_item>())).rtransid as *const _ as usize },
        319usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item),
            "::",
            stringify!(rtransid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_root_item>())).ctime as *const _ as usize },
        327usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item),
            "::",
            stringify!(ctime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_root_item>())).otime as *const _ as usize },
        339usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item),
            "::",
            stringify!(otime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_root_item>())).stime as *const _ as usize },
        351usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item),
            "::",
            stringify!(stime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_root_item>())).rtime as *const _ as usize },
        363usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item),
            "::",
            stringify!(rtime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_root_item>())).reserved as *const _ as usize },
        375usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_item),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_root_ref {
    pub dirid: __le64,
    pub sequence: __le64,
    pub name_len: __le16,
}
#[test]
fn bindgen_test_layout_btrfs_root_ref() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_root_ref>(),
        18usize,
        concat!("Size of: ", stringify!(btrfs_root_ref))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_root_ref>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_root_ref))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_root_ref>())).dirid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_ref),
            "::",
            stringify!(dirid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_root_ref>())).sequence as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_ref),
            "::",
            stringify!(sequence)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_root_ref>())).name_len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_root_ref),
            "::",
            stringify!(name_len)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct btrfs_disk_balance_args {
    pub profiles: __le64,
    pub __bindgen_anon_1: btrfs_disk_balance_args__bindgen_ty_1,
    pub devid: __le64,
    pub pstart: __le64,
    pub pend: __le64,
    pub vstart: __le64,
    pub vend: __le64,
    pub target: __le64,
    pub flags: __le64,
    pub __bindgen_anon_2: btrfs_disk_balance_args__bindgen_ty_2,
    pub stripes_min: __le32,
    pub stripes_max: __le32,
    pub unused: [__le64; 6usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union btrfs_disk_balance_args__bindgen_ty_1 {
    pub usage: __le64,
    pub __bindgen_anon_1: btrfs_disk_balance_args__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_disk_balance_args__bindgen_ty_1__bindgen_ty_1 {
    pub usage_min: __le32,
    pub usage_max: __le32,
}
#[test]
fn bindgen_test_layout_btrfs_disk_balance_args__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_disk_balance_args__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(btrfs_disk_balance_args__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_disk_balance_args__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(btrfs_disk_balance_args__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_disk_balance_args__bindgen_ty_1__bindgen_ty_1>()))
                .usage_min as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_disk_balance_args__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(usage_min)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_disk_balance_args__bindgen_ty_1__bindgen_ty_1>()))
                .usage_max as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_disk_balance_args__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(usage_max)
        )
    );
}
#[test]
fn bindgen_test_layout_btrfs_disk_balance_args__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_disk_balance_args__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(btrfs_disk_balance_args__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_disk_balance_args__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(btrfs_disk_balance_args__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_disk_balance_args__bindgen_ty_1>())).usage as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_disk_balance_args__bindgen_ty_1),
            "::",
            stringify!(usage)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union btrfs_disk_balance_args__bindgen_ty_2 {
    pub limit: __le64,
    pub __bindgen_anon_1: btrfs_disk_balance_args__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_disk_balance_args__bindgen_ty_2__bindgen_ty_1 {
    pub limit_min: __le32,
    pub limit_max: __le32,
}
#[test]
fn bindgen_test_layout_btrfs_disk_balance_args__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_disk_balance_args__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(btrfs_disk_balance_args__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_disk_balance_args__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(btrfs_disk_balance_args__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_disk_balance_args__bindgen_ty_2__bindgen_ty_1>()))
                .limit_min as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_disk_balance_args__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(limit_min)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_disk_balance_args__bindgen_ty_2__bindgen_ty_1>()))
                .limit_max as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_disk_balance_args__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(limit_max)
        )
    );
}
#[test]
fn bindgen_test_layout_btrfs_disk_balance_args__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_disk_balance_args__bindgen_ty_2>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(btrfs_disk_balance_args__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_disk_balance_args__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(btrfs_disk_balance_args__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_disk_balance_args__bindgen_ty_2>())).limit as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_disk_balance_args__bindgen_ty_2),
            "::",
            stringify!(limit)
        )
    );
}
#[test]
fn bindgen_test_layout_btrfs_disk_balance_args() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_disk_balance_args>(),
        136usize,
        concat!("Size of: ", stringify!(btrfs_disk_balance_args))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_disk_balance_args>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_disk_balance_args))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_disk_balance_args>())).profiles as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_disk_balance_args),
            "::",
            stringify!(profiles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_disk_balance_args>())).devid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_disk_balance_args),
            "::",
            stringify!(devid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_disk_balance_args>())).pstart as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_disk_balance_args),
            "::",
            stringify!(pstart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_disk_balance_args>())).pend as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_disk_balance_args),
            "::",
            stringify!(pend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_disk_balance_args>())).vstart as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_disk_balance_args),
            "::",
            stringify!(vstart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_disk_balance_args>())).vend as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_disk_balance_args),
            "::",
            stringify!(vend)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_disk_balance_args>())).target as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_disk_balance_args),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_disk_balance_args>())).flags as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_disk_balance_args),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_disk_balance_args>())).stripes_min as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_disk_balance_args),
            "::",
            stringify!(stripes_min)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_disk_balance_args>())).stripes_max as *const _ as usize
        },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_disk_balance_args),
            "::",
            stringify!(stripes_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_disk_balance_args>())).unused as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_disk_balance_args),
            "::",
            stringify!(unused)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct btrfs_balance_item {
    pub flags: __le64,
    pub data: btrfs_disk_balance_args,
    pub meta: btrfs_disk_balance_args,
    pub sys: btrfs_disk_balance_args,
    pub unused: [__le64; 4usize],
}
#[test]
fn bindgen_test_layout_btrfs_balance_item() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_balance_item>(),
        448usize,
        concat!("Size of: ", stringify!(btrfs_balance_item))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_balance_item>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_balance_item))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_balance_item>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_balance_item),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_balance_item>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_balance_item),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_balance_item>())).meta as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_balance_item),
            "::",
            stringify!(meta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_balance_item>())).sys as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_balance_item),
            "::",
            stringify!(sys)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_balance_item>())).unused as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_balance_item),
            "::",
            stringify!(unused)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_file_extent_item {
    pub generation: __le64,
    pub ram_bytes: __le64,
    pub compression: __u8,
    pub encryption: __u8,
    pub other_encoding: __le16,
    pub type_: __u8,
    pub disk_bytenr: __le64,
    pub disk_num_bytes: __le64,
    pub offset: __le64,
    pub num_bytes: __le64,
}
#[test]
fn bindgen_test_layout_btrfs_file_extent_item() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_file_extent_item>(),
        53usize,
        concat!("Size of: ", stringify!(btrfs_file_extent_item))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_file_extent_item>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_file_extent_item))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_file_extent_item>())).generation as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_file_extent_item),
            "::",
            stringify!(generation)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_file_extent_item>())).ram_bytes as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_file_extent_item),
            "::",
            stringify!(ram_bytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_file_extent_item>())).compression as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_file_extent_item),
            "::",
            stringify!(compression)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_file_extent_item>())).encryption as *const _ as usize
        },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_file_extent_item),
            "::",
            stringify!(encryption)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_file_extent_item>())).other_encoding as *const _ as usize
        },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_file_extent_item),
            "::",
            stringify!(other_encoding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_file_extent_item>())).type_ as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_file_extent_item),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_file_extent_item>())).disk_bytenr as *const _ as usize
        },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_file_extent_item),
            "::",
            stringify!(disk_bytenr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_file_extent_item>())).disk_num_bytes as *const _ as usize
        },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_file_extent_item),
            "::",
            stringify!(disk_num_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_file_extent_item>())).offset as *const _ as usize },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_file_extent_item),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_file_extent_item>())).num_bytes as *const _ as usize
        },
        45usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_file_extent_item),
            "::",
            stringify!(num_bytes)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_csum_item {
    pub csum: __u8,
}
#[test]
fn bindgen_test_layout_btrfs_csum_item() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_csum_item>(),
        1usize,
        concat!("Size of: ", stringify!(btrfs_csum_item))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_csum_item>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_csum_item))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_csum_item>())).csum as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_csum_item),
            "::",
            stringify!(csum)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_dev_stats_item {
    pub values: [__le64; 5usize],
}
#[test]
fn bindgen_test_layout_btrfs_dev_stats_item() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_dev_stats_item>(),
        40usize,
        concat!("Size of: ", stringify!(btrfs_dev_stats_item))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_dev_stats_item>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_dev_stats_item))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_dev_stats_item>())).values as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dev_stats_item),
            "::",
            stringify!(values)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_dev_replace_item {
    pub src_devid: __le64,
    pub cursor_left: __le64,
    pub cursor_right: __le64,
    pub cont_reading_from_srcdev_mode: __le64,
    pub replace_state: __le64,
    pub time_started: __le64,
    pub time_stopped: __le64,
    pub num_write_errors: __le64,
    pub num_uncorrectable_read_errors: __le64,
}
#[test]
fn bindgen_test_layout_btrfs_dev_replace_item() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_dev_replace_item>(),
        72usize,
        concat!("Size of: ", stringify!(btrfs_dev_replace_item))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_dev_replace_item>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_dev_replace_item))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_dev_replace_item>())).src_devid as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dev_replace_item),
            "::",
            stringify!(src_devid)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_dev_replace_item>())).cursor_left as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dev_replace_item),
            "::",
            stringify!(cursor_left)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_dev_replace_item>())).cursor_right as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dev_replace_item),
            "::",
            stringify!(cursor_right)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_dev_replace_item>())).cont_reading_from_srcdev_mode
                as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dev_replace_item),
            "::",
            stringify!(cont_reading_from_srcdev_mode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_dev_replace_item>())).replace_state as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dev_replace_item),
            "::",
            stringify!(replace_state)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_dev_replace_item>())).time_started as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dev_replace_item),
            "::",
            stringify!(time_started)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_dev_replace_item>())).time_stopped as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dev_replace_item),
            "::",
            stringify!(time_stopped)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_dev_replace_item>())).num_write_errors as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dev_replace_item),
            "::",
            stringify!(num_write_errors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_dev_replace_item>())).num_uncorrectable_read_errors
                as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_dev_replace_item),
            "::",
            stringify!(num_uncorrectable_read_errors)
        )
    );
}
pub const btrfs_raid_types_BTRFS_RAID_RAID10: btrfs_raid_types = 0;
pub const btrfs_raid_types_BTRFS_RAID_RAID1: btrfs_raid_types = 1;
pub const btrfs_raid_types_BTRFS_RAID_DUP: btrfs_raid_types = 2;
pub const btrfs_raid_types_BTRFS_RAID_RAID0: btrfs_raid_types = 3;
pub const btrfs_raid_types_BTRFS_RAID_SINGLE: btrfs_raid_types = 4;
pub const btrfs_raid_types_BTRFS_RAID_RAID5: btrfs_raid_types = 5;
pub const btrfs_raid_types_BTRFS_RAID_RAID6: btrfs_raid_types = 6;
pub const btrfs_raid_types_BTRFS_NR_RAID_TYPES: btrfs_raid_types = 7;
pub type btrfs_raid_types = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_block_group_item {
    pub used: __le64,
    pub chunk_objectid: __le64,
    pub flags: __le64,
}
#[test]
fn bindgen_test_layout_btrfs_block_group_item() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_block_group_item>(),
        24usize,
        concat!("Size of: ", stringify!(btrfs_block_group_item))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_block_group_item>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_block_group_item))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_block_group_item>())).used as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_block_group_item),
            "::",
            stringify!(used)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_block_group_item>())).chunk_objectid as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_block_group_item),
            "::",
            stringify!(chunk_objectid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_block_group_item>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_block_group_item),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_free_space_info {
    pub extent_count: __le32,
    pub flags: __le32,
}
#[test]
fn bindgen_test_layout_btrfs_free_space_info() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_free_space_info>(),
        8usize,
        concat!("Size of: ", stringify!(btrfs_free_space_info))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_free_space_info>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_free_space_info))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_free_space_info>())).extent_count as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_free_space_info),
            "::",
            stringify!(extent_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_free_space_info>())).flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_free_space_info),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_qgroup_status_item {
    pub version: __le64,
    pub generation: __le64,
    pub flags: __le64,
    pub rescan: __le64,
}
#[test]
fn bindgen_test_layout_btrfs_qgroup_status_item() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_qgroup_status_item>(),
        32usize,
        concat!("Size of: ", stringify!(btrfs_qgroup_status_item))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_qgroup_status_item>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_qgroup_status_item))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_qgroup_status_item>())).version as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_qgroup_status_item),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_qgroup_status_item>())).generation as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_qgroup_status_item),
            "::",
            stringify!(generation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_qgroup_status_item>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_qgroup_status_item),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_qgroup_status_item>())).rescan as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_qgroup_status_item),
            "::",
            stringify!(rescan)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_qgroup_info_item {
    pub generation: __le64,
    pub rfer: __le64,
    pub rfer_cmpr: __le64,
    pub excl: __le64,
    pub excl_cmpr: __le64,
}
#[test]
fn bindgen_test_layout_btrfs_qgroup_info_item() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_qgroup_info_item>(),
        40usize,
        concat!("Size of: ", stringify!(btrfs_qgroup_info_item))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_qgroup_info_item>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_qgroup_info_item))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_qgroup_info_item>())).generation as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_qgroup_info_item),
            "::",
            stringify!(generation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_qgroup_info_item>())).rfer as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_qgroup_info_item),
            "::",
            stringify!(rfer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_qgroup_info_item>())).rfer_cmpr as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_qgroup_info_item),
            "::",
            stringify!(rfer_cmpr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_qgroup_info_item>())).excl as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_qgroup_info_item),
            "::",
            stringify!(excl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_qgroup_info_item>())).excl_cmpr as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_qgroup_info_item),
            "::",
            stringify!(excl_cmpr)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct btrfs_qgroup_limit_item {
    pub flags: __le64,
    pub max_rfer: __le64,
    pub max_excl: __le64,
    pub rsv_rfer: __le64,
    pub rsv_excl: __le64,
}
#[test]
fn bindgen_test_layout_btrfs_qgroup_limit_item() {
    assert_eq!(
        ::std::mem::size_of::<btrfs_qgroup_limit_item>(),
        40usize,
        concat!("Size of: ", stringify!(btrfs_qgroup_limit_item))
    );
    assert_eq!(
        ::std::mem::align_of::<btrfs_qgroup_limit_item>(),
        1usize,
        concat!("Alignment of ", stringify!(btrfs_qgroup_limit_item))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<btrfs_qgroup_limit_item>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_qgroup_limit_item),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_qgroup_limit_item>())).max_rfer as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_qgroup_limit_item),
            "::",
            stringify!(max_rfer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_qgroup_limit_item>())).max_excl as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_qgroup_limit_item),
            "::",
            stringify!(max_excl)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_qgroup_limit_item>())).rsv_rfer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_qgroup_limit_item),
            "::",
            stringify!(rsv_rfer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<btrfs_qgroup_limit_item>())).rsv_excl as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(btrfs_qgroup_limit_item),
            "::",
            stringify!(rsv_excl)
        )
    );
}
